var documenterSearchIndex = {"docs":
[{"location":"examples/demo-example/#Demo-Example","page":"Demo Example","title":"Demo Example","text":"","category":"section"},{"location":"examples/demo-example/","page":"Demo Example","title":"Demo Example","text":"An empty example to check that the docs build correctly","category":"page"},{"location":"examples/demo-example/","page":"Demo Example","title":"Demo Example","text":"using SSMProblems\nusing GeneralisedFilters","category":"page"},{"location":"examples/demo-example/","page":"Demo Example","title":"Demo Example","text":"","category":"page"},{"location":"examples/demo-example/","page":"Demo Example","title":"Demo Example","text":"This page was generated using Literate.jl.","category":"page"},{"location":"#GeneralisedFilters","page":"Home","title":"GeneralisedFilters","text":"","category":"section"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"In the julia REPL:","category":"page"},{"location":"","page":"Home","title":"Home","text":"] add GeneralisedFilters","category":"page"},{"location":"#Documentation","page":"Home","title":"Documentation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"GeneralisedFilters provides implementations of various filtering and smoothing algorithms for state-space models (SSMs). The goal of the package is to provide a modular and extensible framework for implementing advanced algorithms including Rao-Blackwellised particle filters, two-filter smoothers, and particle Gibbs/conditional SMC. Performance is a primary focus of this work, with type stability, GPU-acceleration, and efficient history storage being key design goals.","category":"page"},{"location":"#Interface","page":"Home","title":"Interface","text":"","category":"section"},{"location":"#GeneralisedFilters.AncestorCallback","page":"Home","title":"GeneralisedFilters.AncestorCallback","text":"AncestorCallback\n\nA callback for sparse ancestry storage, which preallocates and returns a populated  ParticleTree object.\n\n\n\n\n\n","category":"type"},{"location":"#GeneralisedFilters.DenseAncestorCallback","page":"Home","title":"GeneralisedFilters.DenseAncestorCallback","text":"DenseAncestorCallback\n\nA callback for dense ancestry storage, which fills a DenseParticleContainer.\n\n\n\n\n\n","category":"type"},{"location":"#GeneralisedFilters.ParticleDistribution","page":"Home","title":"GeneralisedFilters.ParticleDistribution","text":"ParticleDistribution\n\nA container for particle filters which composes the weighted sample into a distibution-like object, with the states (or particles) distributed accoring to their log-weights.\n\n\n\n\n\n","category":"type"},{"location":"#GeneralisedFilters.ParticleTree","page":"Home","title":"GeneralisedFilters.ParticleTree","text":"ParticleTree\n\nA sparse container for particle ancestry, which tracks the lineage of the filtered draws.\n\nReference\n\nJacob, P., Murray L., & Rubenthaler S. (2015). Path storage in the particle  filter doi:10.1007/s11222-013-9445-x\n\n\n\n\n\n","category":"type"},{"location":"#GeneralisedFilters.RaoBlackwellisedParticle","page":"Home","title":"GeneralisedFilters.RaoBlackwellisedParticle","text":"RaoBlackwellisedParticle\n\nA container for Rao-Blackwellised states, composed of a marginalised state z (e.g. a Gaussian or Categorical distribution) and a singular state x.\n\n\n\n\n\n","category":"type"},{"location":"#GeneralisedFilters.ResamplerCallback","page":"Home","title":"GeneralisedFilters.ResamplerCallback","text":"ResamplerCallback\n\nA callback which follows the resampling indices over the filtering algorithm. This is more of a debug tool and visualizer for various resapmling algorithms.\n\n\n\n\n\n","category":"type"},{"location":"#GeneralisedFilters.initialise","page":"Home","title":"GeneralisedFilters.initialise","text":"initialise([rng,] model, alg; kwargs...)\n\nPropose an initial state distribution.\n\n\n\n\n\n","category":"function"},{"location":"#GeneralisedFilters.predict","page":"Home","title":"GeneralisedFilters.predict","text":"predict([rng,] model, alg, iter, filtered; kwargs...)\n\nPropagate the filtered distribution forward in time.\n\n\n\n\n\n","category":"function"},{"location":"#GeneralisedFilters.step","page":"Home","title":"GeneralisedFilters.step","text":"step([rng,] model, alg, iter, state, observation; kwargs...)\n\nPerform a combined predict and update call of the filtering on the state.\n\n\n\n\n\n","category":"function"},{"location":"#GeneralisedFilters.update","page":"Home","title":"GeneralisedFilters.update","text":"update(model, alg, iter, proposed, observation; kwargs...)\n\nUpdate beliefs on the propagated distribution given an observation.\n\n\n\n\n\n","category":"function"}]
}
