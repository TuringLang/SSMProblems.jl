name: CI

on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ startsWith(github.ref, 'refs/pull/') }}

jobs:
  test:
    name: ${{ matrix.pkg.name }} Julia ${{ matrix.version }} - ${{ matrix.os }} - ${{ matrix.arch }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        version:
          - '1.6'  # LTS
          - '1'    # Latest stable
        os:
          - ubuntu-latest
          - windows-latest
          - macOS-latest
        arch:
          - x64
        pkg:
          - name: SSMProblems
            dir: './SSMProblems'
            additional_paths: ""
          - name: GeneralisedFilters
            dir: './GeneralisedFilters'
            additional_paths: "./SSMProblems"
        exclude:
          # Skip some combinations to reduce CI load
          - version: '1.6'
            os: windows-latest
          - version: '1.6'
            os: macOS-latest

    steps:
      - uses: actions/checkout@v4
      
      - uses: julia-actions/setup-julia@v2
        with:
          version: ${{ matrix.version }}
          arch: ${{ matrix.arch }}
          
      - uses: julia-actions/cache@v1
      
      - name: Install dependencies
        run: |
          julia --project=${{ matrix.pkg.dir }}/ --color=yes -e '
          using Pkg;
          Pkg.Registry.update();
          if "${{ matrix.pkg.name }}" == "GeneralisedFilters"
              Pkg.develop(PackageSpec(path="./SSMProblems"));
          end;
          Pkg.instantiate();'
          
      - name: Run tests
        run: |
          julia --project=${{ matrix.pkg.dir }}/ --color=yes -e '
          using Pkg;
          Pkg.test(coverage=true);'
          
      - uses: julia-actions/julia-processcoverage@v1
        if: matrix.version == '1' && matrix.os == 'ubuntu-latest'
        
      - uses: codecov/codecov-action@v4
        if: matrix.version == '1' && matrix.os == 'ubuntu-latest'
        with:
          files: lcov.info
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false

  test-gpu:
    name: ${{ matrix.pkg.name }} GPU tests
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        pkg:
          - name: GeneralisedFilters
            dir: './GeneralisedFilters'
    
    steps:
      - uses: actions/checkout@v4
      
      - uses: julia-actions/setup-julia@v2
        with:
          version: '1'
          
      - uses: julia-actions/cache@v1
      
      - name: Install dependencies
        run: |
          julia --project=${{ matrix.pkg.dir }}/ --color=yes -e '
          using Pkg;
          Pkg.Registry.update();
          Pkg.develop(PackageSpec(path="./SSMProblems"));
          Pkg.instantiate();'
      
      # Note: GPU tests will be skipped automatically if CUDA is not available
      # The TestItems framework in GeneralisedFilters handles this with tags
      - name: Run GPU tests
        run: |
          julia --project=${{ matrix.pkg.dir }}/ --color=yes -e '
          using Pkg;
          # Try to run GPU tests, but don'\''t fail if CUDA is not available
          try
              using CUDA
              if CUDA.functional()
                  println("CUDA functional, running GPU tests")
                  using TestItemRunner
                  TestItemRunner.runtests("${{ matrix.pkg.dir }}/test/", filter=ti -> :gpu in ti.tags)
              else
                  println("CUDA not functional, skipping GPU tests")
              end
          catch e
              println("CUDA not available, skipping GPU tests: ", e)
          end'